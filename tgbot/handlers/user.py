import random

from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hcode

from tgbot.keyboards.inline import *
from tgbot.misc.states import FSMUser
from tgbot.models.db_connector import *
from tgbot.handlers.admin import admin_group
from create_bot import bot


async def user_start_msg(message: Message):
    user_id = str(message.from_user.id)
    username = message.from_user.username
    is_user = await is_user_sql(user_id)
    if not is_user:
        await create_user_sql(user_id, username)
    text = [
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –±–æ—Ç —Å—Ç–µ–Ω–¥–∞–ø-–∫–ª—É–±–∞ Stand-Up Station Antalya. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª –Ω–∞ –ª—é–±–æ–µ –Ω–∞—à–µ',
        '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –∑–∞–ø–∏—Å—å –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. \n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ',
        '–¥–µ–π—Å—Ç–≤–∏–µ.'
    ]
    keyboard = user_mainmenu_kb()
    await FSMUser.home.set()
    await message.answer(' '.join(text), reply_markup=keyboard)


async def user_start_clb(callback: CallbackQuery):
    text = [
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –±–æ—Ç —Å—Ç–µ–Ω–¥–∞–ø-–∫–ª—É–±–∞ Stand-Up Station Antalya. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª –Ω–∞ –ª—é–±–æ–µ –Ω–∞—à–µ',
        '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –∑–∞–ø–∏—Å—å –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. \n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ',
        '–¥–µ–π—Å—Ç–≤–∏–µ.'
    ]
    keyboard = user_mainmenu_kb()
    await FSMUser.home.set()
    await callback.message.answer(' '.join(text), reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)
    

async def record_table(callback: CallbackQuery):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å'
    events = await get_user_events_sql()
    keyboard = events_kb(events, False)
    await FSMUser.create_reg.set()
    await callback.message.answer(text, reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def click_event(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username_pr = callback.from_user.username
    if username_pr is None:
        user_username = ''
    else:
        user_username = f'@{username_pr}'
    event_id = callback.data.split(':')[1]
    is_registarted = await is_registrated_sql(str(user_id), event_id)
    event_capacity_pr = await get_event_capacity_sql(event_id)
    event_capacity = event_capacity_pr['capacity']
    event_total_pr = await get_total_regs_sql(event_id)
    if event_total_pr['SUM(number_persons)'] is None:
        event_total = 0
    else:
        event_total = event_total_pr['SUM(number_persons)']
    if is_registarted:
        text = f'–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. –ß—Ç–æ–±—ã –µ–≥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É'
        keyboard = edit_registration_kb()
        await callback.message.answer(text, reply_markup=keyboard)
        await bot.answer_callback_query(callback.id)
    elif event_total >= event_capacity:
        text_user = f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã, –Ω–æ –º—ã –≤–∞–º —Å–æ–æ–±—â–∏–º —Å—Ä–∞–∑—É –∂–µ, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ—è–∞—è—Ç—Å—è'
        keyboard_user = home_kb()
        text_admin = f'‚ö†Ô∏è –ü–æ—Å–µ—Ç–∏—Ç–µ–ª—é {user_username} –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª: –≤—Å—ë –∑–∞–Ω—è—Ç–æ'
        keyboard_admin = answer_kb(user_id)
        await callback.message.answer(text_user, reply_markup=keyboard_user)
        await bot.send_message(chat_id=admin_group, text=text_admin, reply_markup=keyboard_admin)
        await bot.answer_callback_query(callback.id)
    else:
        event_dict = await get_event_id_sql(event_id)
        event_dtime = get_rus_dtime(event_dict["dtime"], 'all')
        event_text = [
            f'<b>{event_dict["title"]}</b>',
            '',
            event_dict['description'],
            '',
            f'‚è∞ –í—Å—Ç—Ä–µ—á–∞–µ–º—Å—è {event_dtime}',
            '',
            f'üìå –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: {event_dict["location"]}'
        ]
        keyboard = home_kb()
        async with state.proxy() as data:
            data['event_id'] = event_id
            data['event_title'] = event_dict["title"]
            data['event_dtime'] = event_dict["dtime"]
            data['user_id'] = str(user_id)
            data['nick_name'] = user_username
        await FSMUser.number_persons.set()
        await bot.send_photo(chat_id=user_id, photo=event_dict['photo_id'], caption='\n'.join(event_text))
        time.sleep(2)
        await callback.message.answer('<b>–ù–∞ —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤–∞–º –Ω—É–∂–µ–Ω —Å—Ç–æ–ª?</b>', reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def number_persons(message: Message, state: FSMContext):
    if message.text.isdigit():
        async with state.proxy() as data:
            data['persons'] = message.text
        text = '–ó–¥–æ—Ä–æ–≤–æ! –ì–¥–µ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–∏–¥–µ—Ç—å?'
        keyboard = wish_kb()
        await FSMUser.wish.set()
    else:
        text = '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
        keyboard = home_kb()
    await message.answer(text, reply_markup=keyboard)


async def wish(callback: CallbackQuery, state: FSMContext):
    wish = callback.data.split(':')[1]
    async with state.proxy() as data:
        data['wish'] = wish
    async with state.proxy() as data:
        event_title = data.as_dict()['event_title']
        event_dtime = data.as_dict()['event_dtime']
        persons = data.as_dict()['persons']
    wish_text = None
    event_date = get_rus_dtime(event_dtime, 'date')
    if wish == 'closer':
        wish_text = '–ò –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∏–¥–µ—Ç—å –ø–æ–±–ª–∏–∂–µ –∫ —Å—Ü–µ–Ω–µ'
    if wish == 'further':
        wish_text = '–ò –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∏–¥–µ—Ç—å –ø–æ–¥–∞–ª—å—à–µ –æ—Ç —Å—Ü–µ–Ω—ã'
    if wish == 'no_diff':
        wish_text = '–ò –≤–∞–º –±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã –≥–¥–µ —Å–∏–¥–µ—Ç—å, –≥–ª–∞–≤–Ω–æ–µ —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è'
    text = [
        '–°—É–ø–µ—Ä! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º:\n',
        f'–í—ã –±—Ä–æ–Ω–∏—Ä—É–µ—Ç–µ —Å—Ç–æ–ª –Ω–∞ {event_title} {event_date} –Ω–∞ {persons} —á–µ–ª–æ–≤–µ–∫',
        wish_text
    ]
    keyboard = accept_registaration_kb()
    await callback.message.answer(' '.join(text), reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def registration_finish(callback: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        event_id = data.as_dict()['event_id']
    table_list = await get_tables_not_event(event_id)
    table = random.choice(table_list)['table_name']
    async with state.proxy() as data:
        data['table'] = table
    text = [
        f'–í–∞–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω —Å—Ç–æ–ª –ø–æ –∏–º–µ–Ω–∏ {hcode(table)}. –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—Ö–æ–¥–µ\n',
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –≤ –±–æ—Ç–µ, –µ—Å–ª–∏ —É –≤–∞—Å —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è'
    ]
    keyboard = home_kb()
    await create_registration_sql(state)
    await callback.message.answer('\n'.join(text), reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def edit_registrations(callback: CallbackQuery):
    user_id = callback.from_user.id
    registrations = await get_user_registrations(str(user_id))
    if len(registrations) == 0:
        text = '–í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏'
        keyboard = home_kb()
    else:
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è'
        keyboard = events_kb(registrations, False)
    await FSMUser.edit_reg.set()
    await callback.message.answer(text, reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def edit_registration(callback: CallbackQuery, state: FSMContext):
    event_id = callback.data.split(':')[1]
    async with state.proxy() as data:
        data['event_id'] = event_id
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ'
    keyboard = edit_reg_menu_kb()
    await callback.message.answer(text, reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def edit_persons(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with state.proxy() as data:
        event_id = data.as_dict()['event_id']
    persons_prev = await get_reg_persons(event_id, str(user_id))
    persons = persons_prev['number_persons']
    text = f'–°–µ–π—á–∞—Å –∑–∞–ø–∏—Å–∞–Ω–æ {persons} —á–µ–ª–æ–≤–µ–∫. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.'
    keyboard = home_kb()
    await callback.message.answer(text, reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def new_persons(message: Message, state: FSMContext):
    if message.text.isdigit():
        user_id = message.from_user.id
        async with state.proxy() as data:
            event_id = data.as_dict()['event_id']
        await edit_persons_sql(event_id, str(user_id), message.text)
        text = '–ó–¥–æ—Ä–æ–≤–æ! –ú—ã –≤–Ω–µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è'
        await FSMUser.wish.set()
    else:
        text = '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
    keyboard = home_kb()
    await message.answer(text, reply_markup=keyboard)



async def delete_reg(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with state.proxy() as data:
        event_id = data.as_dict()['event_id']
    await delete_registration_sql(event_id, str(user_id))
    text = '–í—ã —É–¥–∞–ª–∏–ª–∏ –∑–∞–ø–∏—Å—å.'
    keyboard = home_kb()
    await callback.message.answer(text, reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def write_to_admin(callback: CallbackQuery):
    text = '–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
    keyboard = home_kb()
    await FSMUser.support.set()
    await callback.message.answer(text, reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def answer_to_admin(callback: CallbackQuery):
    text = '–ù–∞–∂–º–∏—Ç–µ –û–¢–í–ï–¢–ò–¢–¨ –¥–ª—è –æ—Ç–≤–µ—Ç–∞'
    keyboard = home_kb()
    await FSMUser.support.set()
    await callback.message.answer(text, reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)

async def send_to_admin(message: Message):
    user_id = message.from_user.id
    username_pr = message.from_user.username
    if username_pr is None:
        user_username = ''
    else:
        user_username = f'@{username_pr}'
    text_user = '–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º'
    keyboard_user = home_kb()
    text_admin = [
        f'‚ö†Ô∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_username} :',
        '',
        message.text
    ]
    keyboard_admin = answer_kb(user_id)
    await FSMUser.home.set()
    await message.answer(text_user, reply_markup=keyboard_user)
    await bot.send_message(admin_group, text='\n'.join(text_admin), reply_markup=keyboard_admin)



def register_user(dp: Dispatcher):
    dp.register_message_handler(user_start_msg, commands=["start"], state="*")
    dp.register_message_handler(number_persons, content_types='text', state=FSMUser.number_persons)
    dp.register_message_handler(new_persons, content_types='text', state=FSMUser.edit_reg)
    dp.register_message_handler(send_to_admin, content_types='text', state=FSMUser.support)

    dp.register_callback_query_handler(user_start_clb, lambda x: x.data == 'home', state='*')
    dp.register_callback_query_handler(record_table, lambda x: x.data in ['record', 'refuse_reg'], state='*')
    dp.register_callback_query_handler(click_event, lambda x: x.data.split(':')[0] == 'event', state=FSMUser.create_reg)
    dp.register_callback_query_handler(wish, lambda x: x.data.split(':')[0] == 'wish', state='*')
    dp.register_callback_query_handler(registration_finish, lambda x: x.data == 'accept_reg', state='*')
    dp.register_callback_query_handler(edit_registrations, lambda x: x.data == 'edit_reg', state='*')
    dp.register_callback_query_handler(edit_registration, lambda x: x.data.split(':')[0] == 'event',
                                       state=FSMUser.edit_reg)
    dp.register_callback_query_handler(edit_persons, lambda x: x.data == 'edit_persons', state=FSMUser.edit_reg)
    dp.register_callback_query_handler(delete_reg, lambda x: x.data == 'del_reg', state='*')
    dp.register_callback_query_handler(write_to_admin, lambda x: x.data == 'support', state='*')
    dp.register_callback_query_handler(answer_to_admin, lambda x: x.data.split(':')[0] == 'answer', state='*')

