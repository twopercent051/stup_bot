import random
import os

from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hcode

from tgbot.keyboards.inline import *
from tgbot.models.db_connector import *
from tgbot.misc.states import FSMEvent
from tgbot.misc.datetime_handler import *
from tgbot.misc.list_creator import create_csv
from create_bot import bot, config

admin_group = config.misc.admin_group


async def admin_start_msg(message: Message):
    text = [
        '–≠—Ç–æ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –¢—É—Ç –º–æ–∂–Ω–æ –∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        '–∏ –Ω–∞–≤–µ—Ä–Ω–æ–µ –º–Ω–æ–≥–æ —á–µ–≥–æ –µ—â—ë. –≠—Ç–æ –ø–µ—Ä–≤–æ–µ, —á—Ç–æ —è –Ω–∞–ø–∏—Å–∞–ª, –∫–æ–≥–¥–∞ —Å–æ–∑–∞–≤–∞–ª –±–æ—Ç–∞, –ø–æ—ç—Ç–æ–º—É –Ω–µ –∑–Ω–∞—é —á—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è.',
        '–ù–∞—Ç–µ –≤–∞–º —Å–º–∞–π–ª–∏–∫ ‚úåÔ∏è'
    ]
    keyboard = admin_mainmenu_kb()
    await FSMEvent.home.set()
    await message.answer(' '.join(text), reply_markup=keyboard)


async def admin_start_clb(callback: CallbackQuery):
    text = [
        '–≠—Ç–æ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –¢—É—Ç –º–æ–∂–Ω–æ –∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        '–∏ –Ω–∞–≤–µ—Ä–Ω–æ–µ –º–Ω–æ–≥–æ —á–µ–≥–æ –µ—â—ë. –≠—Ç–æ –ø–µ—Ä–≤–æ–µ, —á—Ç–æ —è –Ω–∞–ø–∏—Å–∞–ª, –∫–æ–≥–¥–∞ —Å–æ–∑–∞–≤–∞–ª –±–æ—Ç–∞, –ø–æ—ç—Ç–æ–º—É –Ω–µ –∑–Ω–∞—é —á—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è.',
        '–ù–∞—Ç–µ –≤–∞–º —Å–º–∞–π–ª–∏–∫ ‚úåÔ∏è'
    ]
    keyboard = admin_mainmenu_kb()
    await FSMEvent.home.set()
    await callback.message.answer(' '.join(text), reply_markup=keyboard)


async def admin_event_menu(callback: CallbackQuery):
    text = '–î–µ–π—Å—Ç–≤—É–π!'
    keyboard = admin_event_menu_kb()
    await callback.message.answer(text, reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def create_event(callback: CallbackQuery):
    text = [
        '–í —ç—Ç–æ–º –º–µ–Ω—é –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—É–ø–∞—é—â–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –í—Å–µ –ø–æ–ª—è, –∫–∞–∫ –≤—ã –∏—Ö –∑–∞–ø–æ–ª–Ω–∏—Ç–µ',
        '–ø–æ–ø–∞–¥—É—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥—è—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏. –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ',
        '\n\n',
        '<b>–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!</b>'
    ]
    keyboard = home_kb()
    await FSMEvent.title.set()
    await callback.message.answer(' '.join(text), reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def create_event_title(message: Message, state: FSMContext):
    text = '–ó–î–û–†–û–í–û! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy hh:mm'
    keyboard = home_kb()
    title = message.text
    async with state.proxy() as data:
        data['title'] = title
    await FSMEvent.dtime.set()
    await message.answer(text, reply_markup=keyboard)



async def create_event_dtime(message: Message, state: FSMContext):
    dt_event = message.text
    dt_stamp = get_datetime_stamp(dt_event)
    if dt_stamp is None:
        text = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞'
        keyboard = home_kb()
    else:
        async with state.proxy() as data:
            data['dtime'] = dt_stamp
        text = '–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ, –≥–¥–µ –æ–Ω–æ –ø—Ä–æ–π–¥—ë—Ç'
        keyboard = home_kb()
        await FSMEvent.location.set()
    await message.answer(text, reply_markup=keyboard)


async def edit_event_dtime(callback: CallbackQuery):
    text = '–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy hh:mm'
    keyboard = home_kb()
    await FSMEvent.dtime.set()
    await callback.message.answer(text, reply_markup=keyboard)


async def create_event_location(message: Message, state: FSMContext):
    text = '–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è'
    keyboard = home_kb()
    location = message.text
    async with state.proxy() as data:
        data['location'] = location
    await FSMEvent.capacity.set()
    await message.answer(text, reply_markup=keyboard)


async def create_event_capacity(message: Message, state: FSMContext):
    if message.text.isdigit():
        text = '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—Ñ–∏—à—É.'
        capacity = message.text
        async with state.proxy() as data:
            data['capacity'] = capacity
        await FSMEvent.picture.set()
    else:
        text = '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
    keyboard = home_kb()
    await message.answer(text, reply_markup=keyboard)


async def create_event_picture(message: Message, state: FSMContext):
    text = '–°–¥–µ–ª–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.'
    keyboard = home_kb()
    photo_id = message.photo[-1].file_id
    async with state.proxy() as data:
        data['photo_id'] = photo_id
    await FSMEvent.description.set()
    await message.answer(text, reply_markup=keyboard)

async def edit_desc(callback: CallbackQuery):
    text = '–°–¥–µ–ª–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.'
    keyboard = home_kb()
    await FSMEvent.description.set()
    await callback.message.answer(text, reply_markup=keyboard)

async def create_event_description(message: Message, state: FSMContext):
    async with state.proxy() as data:
        title = data.as_dict()['title']
        dtime = data.as_dict()['dtime']
        location = data.as_dict()['location']
        photo_id = data.as_dict()['photo_id']
    description = message.text
    event_dtime = get_rus_dtime(dtime, 'all')
    text = [
        '–í–æ—Ç —Ç–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å:',
        f'<b>{title}</b>',
        '',
        description,
        '',
        f'‚è∞ –í—Å—Ç—Ä–µ—á–∞–µ–º—Å—è {event_dtime}',
        '',
        f'üìå –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: {location}',
        '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ'
    ]
    async with state.proxy() as data:
        data['description'] = description
    await FSMEvent.description.set()
    try:
        keyboard = public_event_kb()
        await bot.send_photo(chat_id=admin_group, photo=photo_id, caption='\n'.join(text), reply_markup=keyboard)
    except:
        err_msg = "\n".join(text)
        text = f'–¢–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É –Ω–∞ {len(err_msg) - 964} —Å–∏–º–≤–æ–ª–æ–≤'
        keyboard = too_long_desc_kb()
        await message.answer(text, reply_markup=keyboard)

async def public_event(callback: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        title = data.as_dict()['title']
    text = f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <b>{title}</b> –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!'
    keyboard = home_kb()
    await create_event_sql(state)
    await callback.message.answer(text, reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)

async def incorrect_message(message: Message):
    text = '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    keyboard = home_kb()
    await message.answer(text, reply_markup=keyboard)


async def show_tables(callback: CallbackQuery):
    text = ['<b>–°–µ–π—á–∞—Å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–æ–≤ —Ç–∞–∫–æ–π:</b>', '']
    tables = await get_tables()
    for table in tables:
        text.append(table['table_name'])
    keyboard = edit_tables_kb()
    await callback.message.answer('\n'.join(text), reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)

async def new_tables(callback: CallbackQuery):
    text = [
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Ç–æ–ª—ã —Å–ø–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ ENTER',
        '‚ö†Ô∏è–í–ù–ò–ú–ê–ù–ò–ï! –ë—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –≤–µ—Å—å —Å–ø–∏—Å–æ–∫, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
    ]
    keyboard = home_kb()
    await FSMEvent.tables.set()
    await callback.message.answer('\n'.join(text), reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def edit_tables_finish(message: Message):
    text = '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
    keyboard = home_kb()
    new_tables = message.text.split('\n')
    await delete_tables_sql()
    for table in new_tables:
        await create_table_sql(table)
    await message.answer(text, reply_markup=keyboard)


async def answer_user_start(callback: CallbackQuery, state: FSMContext):
    user_id = callback.data.split(':')[1]
    text = '–ù–∞–∂–º–∏—Ç–µ –û–¢–í–ï–¢–ò–¢–¨ –¥–ª—è –æ—Ç–≤–µ—Ç–∞'
    keyboard = home_kb()
    async with state.proxy() as data:
        data['user_id'] = user_id
    await FSMEvent.answer.set()
    await callback.message.answer(text, reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def answer_user_finish(message: Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = data.as_dict()['user_id']
    text_admin = '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    keyboard_admin = home_kb()
    text_user = [
        '‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:',
        '',
        message.text
    ]
    keyboard_user = answer_kb(admin_group)
    await FSMEvent.home.set()
    await message.answer(text_admin, reply_markup=keyboard_admin)
    await bot.send_message(user_id, text='\n'.join(text_user), reply_markup=keyboard_user)


async def show_events(callback: CallbackQuery):
    text = '–ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –ø—Ä–æ—à–µ–¥—à–∏–µ –Ω–µ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π'
    events = await get_admin_events_sql()
    keyboard = events_kb(events, True)
    await callback.message.answer(text, reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def event_info(callback: CallbackQuery, state: FSMContext):
    event_id = callback.data.split(':')[1]
    async with state.proxy() as data:
        data['event_id'] = event_id
    event_dict = await get_event_id_sql(event_id)
    reg_dict = await get_total_regs_sql(event_id)
    event_dtime = get_rus_dtime(event_dict["dtime"], 'all')
    if reg_dict['SUM(number_persons)'] is None:
        event_total = 0
    else:
        event_total = reg_dict['SUM(number_persons)']
    text = [
        f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é <b>{event_dict["title"]}:</b>',
        f'–ú–µ—Å—Ç–æ: <i>{event_dict["location"]}</i>',
        f'–î–∞—Ç–∞-–≤—Ä–µ–º—è: <i>{event_dtime}</i>',
        f'–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ: <i>{reg_dict["COUNT(id)"]}</i> —Å—Ç–æ–ª–æ–≤ –Ω–∞ <i>{event_total}</i> —á–µ–ª–æ–≤–µ–∫'
    ]
    keyboard = admin_event_kb()
    await callback.message.answer('\n'.join(text), reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def manual_reg_start(callback: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        event_id = data.as_dict()['event_id']
    event_capacity_pr = await get_event_capacity_sql(event_id)
    event_capacity = event_capacity_pr['capacity']
    event_total_pr = await get_total_regs_sql(event_id)
    if event_total_pr['SUM(number_persons)'] is None:
        event_total = 0
    else:
        event_total = event_total_pr['SUM(number_persons)']
    if event_total >= event_capacity:
        text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã'
    else:
        text = '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π'
        await FSMEvent.persons.set()
    keyboard = home_kb()
    await callback.message.answer(text, reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def manual_reg_persons(message: Message, state: FSMContext):
    if message.text.isdigit():
        async with state.proxy() as data:
            data['persons'] = message.text
        text = '–ö–æ–Ω—Ç–∞–∫—Ç –≥–æ—Å—Ç—è'
        keyboard = home_kb()
        await FSMEvent.nickname.set()
    else:
        text = '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
        keyboard = home_kb()
    await message.answer(text, reply_markup=keyboard)


async def manual_reg_nickname(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['nick_name'] = message.text
    text = '–ö–∞–∫–æ–π –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ?'
    keyboard = wish_kb()
    await FSMEvent.wish.set()
    await message.answer(text, reply_markup=keyboard)

async def manual_reg_wish(callback: CallbackQuery, state: FSMContext):
    wish = callback.data.split(':')[1]
    async with state.proxy() as data:
        data['wish'] = wish
    async with state.proxy() as data:
        persons = data.as_dict()['persons']
    wish_text = None
    if wish == 'closer':
        wish_text = '–ø–æ–±–ª–∏–∂–µ –∫ —Å—Ü–µ–Ω–µ'
    if wish == 'further':
        wish_text = '–ø–æ–¥–∞–ª—å—à–µ –æ—Ç —Å—Ü–µ–Ω—ã'
    if wish == 'no_diff':
        wish_text = '–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã –≥–¥–µ —Å–∏–¥–µ—Ç—å'
    text = [
        '–ó–¥–æ—Ä–æ–≤–æ! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º:',
        f'–í—ã –±—Ä–æ–Ω–∏—Ä—É–µ—Ç–µ —Å—Ç–æ–ª –Ω–∞ {persons} —á–µ–ª–æ–≤–µ–∫, {wish_text}'
    ]
    keyboard = accept_registaration_kb()
    await callback.message.answer('\n'.join(text), reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def registration_finish(callback: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        event_id = data.as_dict()['event_id']
    table_list = await get_tables_not_event(event_id)
    table = random.choice(table_list)['table_name']
    async with state.proxy() as data:
        data['table'] = table
        data['user_id'] = 0
    text = f'–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω —Å—Ç–æ–ª {hcode(table)}. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É'
    keyboard = home_kb()
    await create_registration_sql(state)
    await callback.message.answer(text, reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def edit_registration_start(callback: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        event_id = data.as_dict()['event_id']
    reg_list = await get_list_sql(event_id)
    if len(reg_list) == 0:
        text = '–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç'
    else:
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    keyboard = reg_list_kb(reg_list)
    await callback.message.answer(text, reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def edit_registration(callback: CallbackQuery, state: FSMContext):
    reg_id = callback.data.split(':')[1]
    num_persons = await get_reg_persons_reg_id(reg_id)
    text = [
        '–í–≤–µ–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –∏–ª–∏ 0 (–Ω–æ–ª—å) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏. –°–µ–π—á–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞',
        f'{num_persons["number_persons"]} —á–µ–ª–æ–≤–µ–∫'
    ]
    keyboard = home_kb()
    async with state.proxy() as data:
        data['reg_id'] = reg_id
    await FSMEvent.edit_reg.set()
    await callback.message.answer(' '.join(text), reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def edit_registration_finish(message: Message, state: FSMContext):
    async with state.proxy() as data:
        reg_id = data.as_dict()['reg_id']
    if message.text.isdigit():
        if int(message.text) == 0:
            await delete_registration_reg_id_sql(reg_id)
        else:
            await edit_persons_reg_id_sql(reg_id, message.text)
        text = '–ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞/—É–¥–∞–ª–µ–Ω–∞'
    else:
        text = '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
    keyboard = home_kb()
    await message.answer(text, reply_markup=keyboard)



async def delete_event(callback: CallbackQuery):
    text = '‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—É–¥–µ—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω–æ –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ –∑–∞–ø–∏—Å—è–º–∏. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ'
    keyboard = delete_event_kb()
    await callback.message.answer(text, reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def accept_del_event(callback: CallbackQuery):
    text = [
        '–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ—Å–ª–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. –û–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ, –∞',
        '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –í—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ'
    ]
    keyboard = home_kb()
    await FSMEvent.delete_event.set()
    await callback.message.answer('\n'.join(text), reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def deleting_finish(message: Message, state: FSMContext):
    async with state.proxy() as data:
        event_id = data.as_dict()['event_id']
    event_dict = await get_event_id_sql(event_id)
    user_list = await get_event_users_sql(event_id)
    event_title = event_dict['title']
    event_dtime = get_rus_dtime(event_dict["dtime"], 'date')
    await delete_event_sql(event_id)
    await delete_reg_event_sql(event_id)
    count = 0
    for user in user_list:
        user_id = int(user['user_id'])
        try:
            await bot.send_message(chat_id=user_id, text=message.text)
            count += 1
        except:
            pass
    text_admin = f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_title} –Ω–∞ {event_dtime} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ. –†–∞–∑–æ—Å–ª–∞–ª–∏ {count} –∏–∑ {len(user_list)}'
    keyboard_admin = home_kb()
    await message.answer(text_admin, reply_markup=keyboard_admin)



async def get_event_list(callback: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        event_id = data.as_dict()['event_id']
    await create_csv(event_id)
    doc_path = f'{os.getcwd()}/event_list.csv'
    await bot.send_document(chat_id=admin_group, document=open(doc_path, 'rb'))
    await bot.answer_callback_query(callback.id)


async def mailing(callback: CallbackQuery):
    text = [
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –û–Ω –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤ –±–æ—Ç–µ. –ú–æ–∂–Ω–æ',
        '–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –≤–∏–¥–µ–æ'
    ]
    keyboard = home_kb()
    await FSMEvent.mailing.set()
    await callback.message.answer(' '.join(text), reply_markup=keyboard)
    await bot.answer_callback_query(callback.id)


async def send_mailing_txt(message: Message):
    user_list = await get_users_sql()
    count = 0
    for user in user_list:
        user_id = int(user['user_id'])
        try:
            await bot.send_message(user_id, message.text)
            count += 1
        except:
            pass
    text_admin = f'–†–∞–∑–æ—Å–ª–∞–ª–∏ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ {len(user_list)}'
    keyboard_admin = home_kb()
    await FSMEvent.home.set()
    await message.answer(text_admin, reply_markup=keyboard_admin)


async def send_mailing_media(message: Message):
    text_user = message.caption
    user_list = await get_users_sql()
    count = 0
    for user in user_list:
        user_id = int(user['user_id'])
        try:
            if len(message.photo) != 0:
                photo = message.photo[0].file_id
                await bot.send_photo(user_id, photo, caption=text_user)
                count += 1
            if message.video is not None:
                video = message.video.file_id
                await bot.send_video(user_id, video, caption=text_user)
                count += 1
        except:
            pass
    text_admin = f'–†–∞–∑–æ—Å–ª–∞–ª–∏ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ {len(user_list)}'
    keyboard_admin = home_kb()
    await FSMEvent.home.set()
    await message.answer(text_admin, reply_markup=keyboard_admin)



def register_admin(dp: Dispatcher):
    error_states = [FSMEvent.title, FSMEvent.dtime, FSMEvent.capacity, FSMEvent.location, FSMEvent.description]
    dp.register_message_handler(admin_start_msg, commands=["start"], state="*", chat_id=admin_group)
    dp.register_message_handler(create_event_title, state=FSMEvent.title, content_types='text', chat_id=admin_group)
    dp.register_message_handler(create_event_dtime, state=FSMEvent.dtime, content_types='text', chat_id=admin_group)
    dp.register_message_handler(create_event_capacity, state=FSMEvent.capacity, content_types='text',
                                chat_id=admin_group)
    dp.register_message_handler(create_event_location, state=FSMEvent.location, content_types='text',
                                chat_id=admin_group)
    dp.register_message_handler(create_event_picture, state=FSMEvent.picture, content_types='photo',
                                chat_id=admin_group)
    dp.register_message_handler(incorrect_message, state=FSMEvent.picture, content_types=['text', 'video', 'sticker'],
                                chat_id=admin_group)
    dp.register_message_handler(create_event_description, state=FSMEvent.description, content_types='text',
                                chat_id=admin_group)
    dp.register_message_handler(incorrect_message, state=error_states, content_types=['photo', 'video', 'sticker'],
                                chat_id=admin_group)
    dp.register_message_handler(edit_tables_finish, state=FSMEvent.tables, content_types='text', chat_id=admin_group)
    dp.register_message_handler(answer_user_finish, state=FSMEvent.answer, content_types='text', chat_id=admin_group)
    dp.register_message_handler(manual_reg_persons, state=FSMEvent.persons, content_types='text', chat_id=admin_group)
    dp.register_message_handler(manual_reg_nickname, state=FSMEvent.nickname, content_types='text', chat_id=admin_group)
    dp.register_message_handler(edit_registration_finish, state=FSMEvent.edit_reg, content_types='text',
                                chat_id=admin_group)
    dp.register_message_handler(send_mailing_txt, state=FSMEvent.mailing, content_types='text', chat_id=admin_group)
    dp.register_message_handler(send_mailing_media, state=FSMEvent.mailing, content_types=['photo', 'video'],
                                chat_id=admin_group)
    dp.register_message_handler(deleting_finish, state=FSMEvent.delete_event, content_types='text', chat_id=admin_group)


    dp.register_callback_query_handler(admin_start_clb, lambda x: x.data == 'home', state='*', chat_id=admin_group)
    dp.register_callback_query_handler(admin_event_menu, lambda x: x.data == 'events', state='*', chat_id=admin_group)
    dp.register_callback_query_handler(create_event, lambda x: x.data == 'create_event', state='*', chat_id=admin_group)
    dp.register_callback_query_handler(public_event, lambda x: x.data == 'public', state=FSMEvent.description,
                                       chat_id=admin_group)
    dp.register_callback_query_handler(edit_desc, lambda x: x.data == 'edit_desc', state=FSMEvent.description,
                                       chat_id=admin_group)
    dp.register_callback_query_handler(edit_event_dtime, lambda x: x.data == 'edit_date', state=FSMEvent.description,
                                       chat_id=admin_group)
    dp.register_callback_query_handler(show_tables, lambda x: x.data == 'tables', state='*', chat_id=admin_group)
    dp.register_callback_query_handler(new_tables, lambda x: x.data == 'edit_tables', state='*', chat_id=admin_group)
    dp.register_callback_query_handler(answer_user_start, lambda x: x.data.split(':')[0] == 'answer', state='*',
                                       chat_id=admin_group)
    dp.register_callback_query_handler(show_events, lambda x: x.data == 'get_events', state='*', chat_id=admin_group)
    dp.register_callback_query_handler(event_info, lambda x: x.data.split(':')[0] == 'event', state='*',
                                       chat_id=admin_group)
    dp.register_callback_query_handler(manual_reg_start, lambda x: x.data == 'manual_reg', state='*',
                                       chat_id=admin_group)
    dp.register_callback_query_handler(manual_reg_wish, lambda x: x.data.split(':')[0] == 'wish', state='*',
                                       chat_id=admin_group)
    dp.register_callback_query_handler(registration_finish, lambda x: x.data == 'accept_reg', state='*',
                                       chat_id=admin_group)
    dp.register_callback_query_handler(edit_registration_start, lambda x: x.data == 'manual_edit', state='*',
                                       chat_id=admin_group)
    dp.register_callback_query_handler(edit_registration, lambda x: x.data.split(':')[0] == 'reg_id', state='*',
                                       chat_id=admin_group)
    dp.register_callback_query_handler(delete_event, lambda x: x.data == 'delete_event', state='*', chat_id=admin_group)
    dp.register_callback_query_handler(accept_del_event, lambda x: x.data == 'delete_event_accept', state='*',
                                       chat_id=admin_group)
    dp.register_callback_query_handler(get_event_list, lambda x: x.data == 'reg_list', state='*', chat_id=admin_group)
    dp.register_callback_query_handler(mailing, lambda x: x.data == 'mailing', state='*', chat_id=admin_group)